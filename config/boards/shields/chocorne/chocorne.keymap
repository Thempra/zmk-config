/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF_L 0
#define LOW_L 1
#define RAI_L 2
#define NUM_L 3
#define FUN_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
// &lt { quick_tap_ms = <-1>; };

/ {
    behaviors {
        ht: hold_tap_mods_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp TAB   	&kp Q   	&kp W        &kp E       &kp R         &kp T         		&kp Y		&kp U		  &kp I			 &kp O		&kp P     		&kp BKSP
                &kp ESC   	&ht LGUI A  &ht LALT S   &ht LCTRL D &ht LSHIFT F  &kp G         		&kp H		&ht RSHIFT J  &ht RCONTRL K	 &ht LALT L	&ht LGUI COLON  &kp QUOT
                &kp LSHIFT  &kp Z   	&kp X 		 &kp C		 &kp V 		   &kp B         		&kp N       &kp M     	  &kp COMMA 	 &kp DOT    &kp FSLH  		&kp ENTER
                                                     &kp LCTRL   &mo NUM_L	   SPACE                &mo RAI_L   &kp SPACE 	  &kp BKSP
                >;
        };


        lower_layer {
            bindings = <
                &trans &kp MINUS        &kp EQUAL         &kp LS(MINUS)    &kp LS(PLUS)     &kp RBRC      &kp STAR  &kp LS(N7)       &kp UARW         &kp LS(BSLH)     &kp LS(N6) &trans
                &trans &kp LS(W)        &kp LS(E)         &kp LS(N9)       &kp LS(N0)       &kp LS(QUOT)  &kp QUOT  &kp LARW         &kp DARW         &kp RARW         &kp LS(N4) &trans
                &trans &kp TILDE        &ht LCTRL LS(N1)  &ht LGUI LS(N2)  &ht LALT BSLH    &kp LS(N3)    &kp RBKT  &ht LALT LBKT    &ht RGUI LS(N5)  &ht RCTRL LBRC   &mo FUN_L	&trans 
                                                                  &trans     &trans &trans              &bootloader &trans	&trans 
            >;
        };


        raise_layer {
            bindings = <
                &trans &kp MINUS        &kp EQUAL         &kp LS(MINUS)    &kp LS(PLUS)     &kp RBRC      &kp STAR  &kp LS(N7)       &kp UARW         &kp LS(BSLH)     &kp LS(N6) &trans
                &trans &kp LS(W)        &kp LS(E)         &kp LS(N9)       &kp LS(N0)       &kp LS(QUOT)  &kp QUOT  &kp LARW         &kp DARW         &kp RARW         &kp LS(N4) &trans
                &trans &kp TILDE        &ht LCTRL LS(N1)  &ht LGUI LS(N2)  &ht LALT BSLH    &kp LS(N3)    &kp RBKT  &ht LALT LBKT    &ht RGUI LS(N5)  &ht RCTRL LBRC   &mo FUN_L	&trans 
                                                                  &trans     &trans &trans              &bootloader &trans	&trans 
            >;
        };


        num_layer {
            bindings = <
                &trans &kp C_VOL_UP  &kp LA(N7)  &kp LA(N8)  &kp LA(N9)   &kp KP_PLUS           &kp KP_MULTIPLY  &kp N7       &kp N8       &kp N9        &kp LS(N5) &trans
                &trans &kp C_VOL_DN  &kp LA(N4)  &kp LA(N5)  &kp LA(N6)   &kp KP_EQUAL          &kp KP_MINUS     &kp N4       &kp N5       &kp N6        &kp N0     &trans
                &trans &kp C_MUTE    &kp LA(N1)  &kp LA(N2)  &kp LA(N3)   &kp BSLH              &kp KP_SLASH     &ht LALT N1  &ht RGUI N2  &ht RCTRL N3  &kp KP_DOT	&trans 
                                                           &trans  &trans &bootloader           &trans &trans	&trans 
            >;
        };



        fn_layer {
            bindings = <
                &trans &bt BT_SEL 0  &kp F7  &kp F8  &kp F9   &kp F12          &kp C_VOL_UP    &kp PG_UP   &kp UARW  &kp PG_DN   &trans &trans
                &trans &bt BT_SEL 1  &kp F4  &kp F5  &kp F6   &kp F11          &kp C_VOL_DN    &kp LARW    &kp DARW  &kp RARW    &trans &trans
                &trans &bt BT_CLR    &kp F1  &kp F2  &kp F3   &kp F10          &kp C_MUTE      &kp C_PREV  &kp C_PP  &kp C_NEXT  &trans &trans 
                                      &trans  &trans &trans                      &trans &trans &trans 
            >;
        };

    };
};
